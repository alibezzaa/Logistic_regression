152+85*2+18*3+12
x = c(2, 5 , 9 , 10 , 6)
mean(x)
mode(x)
median(x)
sort(x)
var(x)
(2-6.4)^2 + (5-6.4)^2 + (9-6.4)^2 + (10-6.4)^2 + (6-6.4)^2
41.2/5
41.2/4
var(x)
sd(a)
sd(x)
summary(x)
# créer une variable qualitative
diplome = c("Eco", "Droit")
# créer une variable qualitative
diplome = c(rep("Eco", "Droit"), 2)
# créer une variable qualitative
diplome = rep(c("Eco", "Droit"), each=6)
summary(diplome)
?replications
diplome = data.frame(diplome = gl(4, 6), levels("Eco", "Droit"))
diplome = data.frame(diplome = gl(4, 6), levels(c("Eco", "Droit"))
diplome = data.frame(diplome = gl(4, 6), levels(c("Eco", "Droit")))
diplome = data.frame(ali = gl(4, 6), levels(c("Eco", "Droit")))
?gl
gl(2, 4, labels = c("Eco", "Droit"), length = 2)
diplome = gl(2, 4, labels = c("Eco", "Droit"), length = 2)
diplome = gl(2, 4, labels = c("Eco", "Droit"), length = 4)
diplome
# deux variables quantitatives
y = c(15, 13, 12, 10, 10, 5)
cor(x,y)
# deux variables quantitatives
y = c(15, 13, 12, 10, 10)
cor(x,y)
cor(x,y)**2
# créer une variable qualitative
lettres = sample(letters, size = 50)
# créer une variable qualitative
lettres = sample(letters, size = 50, replace = TRUE)
lettres = factor(lettres)
summary(lettres)
getmode(lettres)
which.max(lettres)
which.max(x)
which.max(y)
which.max(y)
?which.max
x <- c(1:4, 0:5, 11)
which.min(x)
which.max(x)
x
# -------- Code Chank 1 --------
library(TSstudio)
data(EURO_Brent)
library(zoo)
# -------- Code Chank 2 --------
ts_info(EURO_Brent)
# -------- Code Chank 3 --------
class(EURO_Brent)
# -------- Code Chank 4 --------
frequency(EURO_Brent)
head(cycle(EURO_Brent), 12)
# -------- Code Chank 5 --------
start(EURO_Brent)
end(EURO_Brent)
head(time(EURO_Brent), 12)
# -------- Code Chank 6 --------
head(index(EURO_Brent))
# -------- Code Chank 7--------
class(index(EURO_Brent))
# -------- Code Chank 8 --------
index(EURO_Brent) <- as.Date(index(EURO_Brent))
head(EURO_Brent)
class(index(EURO_Brent))
# -------- Code Chank 9 --------
monthly_dates <- seq.Date(from = as.Date("2019-01-01"), length.out = 12, by = "month")
head(monthly_dates)
monthly_dates
# -------- Code Chank 9 --------
monthly_dates <- seq.Date(from = as.Date("2019-01-01"), length.out = 12, by = "day")
head(monthly_dates)
# -------- Code Chank 9 --------
monthly_dates <- seq.Date(from = as.Date("2019-01-01"), length.out = 12, by = "month")
head(monthly_dates)
# -------- Code Chank 10 --------
monthly_yearmon <- as.yearmon(monthly_dates)
head(monthly_yearmon)
# -------- Code Chank 11 --------
data(USgas)
head(time(USgas))
USgas
# -------- Code Chank 12 --------
head(as.Date.ts(USgas))
# -------- Code Chank 13 --------
data(US_indicators)
str(US_indicators)
View(US_indicators)
# -------- Code Chank 14 --------
Vehicle_Sales1 <- zoo(x = US_indicators$`Vehicle Sales`,
frequency = 12)
class(Vehicle_Sales1 )
frequency(Vehicle_Sales1)
head(Vehicle_Sales1)
Vehicle_Sales1
View(US_indicators)
# -------- Code Chank 15 --------
Vehicle_Sales2 <- zoo(x = US_indicators$`Vehicle Sales`,
order.by = US_indicators$Date,
frequency = 12)
head(Vehicle_Sales2)
class(index(Vehicle_Sales2))
# -------- Code Chank 16 --------
data(USgas)
USgas_zoo <- as.zoo(USgas)
# -------- Code Chank 17 --------
ts_info(USgas)
ts_info(USgas_zoo)
# -------- Code Chank 18 --------
is.regular(EURO_Brent, strict = TRUE)
is.regular(Vehicle_Sales1, strict = TRUE)
is.regular(Vehicle_Sales2, strict = TRUE)
is.regular(USgas_zoo, strict = TRUE)
# -------- Code Chank 19 --------
is.regular(EURO_Brent, strict = FALSE)
is.regular(Vehicle_Sales2, strict = FALSE)
# -------- Code Chank 20 --------
US_indicators_zoo <- zoo(x = US_indicators[,c("Vehicle Sales", "Unemployment Rate")],
frequency = 12,
order.by = US_indicators$Date)
# -------- Code Chank 21 --------
ts_info(US_indicators_zoo)
head(US_indicators_zoo)
# -------- Code Chank 22 --------
is.regular(US_indicators_zoo, strict = FALSE)
# -------- Code Chank 23 --------
data(Michigan_CS)
ts_info(Michigan_CS)
class(Michigan_CS)
# -------- Code Chank 24 --------
class(index(Michigan_CS))
frequency(Michigan_CS)
is.regular(Michigan_CS, strict = TRUE)
# -------- Code Chank 24 --------
head(Michigan_CS)
# -------- Code Chank 1 --------
library(TSstudio)
data(USVSales)
# The lags function return the series with its l lags
lags <- function(ts.obj, l){
ts_merged <- NULL
# Creating n lags
for(i in 1:l){
}
# Merge the lags with the original series
ts_merged <- ts.union(ts.obj, ts_merged)
# Set the columns names
ts_merged <- ts.union(ts_merged, stats::lag(ts.obj, k = -i))
colnames(ts_merged) <- c("y", paste0("y_", 1:i))
# Removing missing values as results of creating the lags
ts_merged <- window(ts_merged,
start = start(ts.obj) + l,
end = end(ts.obj))
return(ts_merged)
}
head(lags(USVSales, l = 3))
ts_info(USVSales)
ts_plot(USVSales,
title = "US Monthly Total Vehicle Sales",
Ytitle = "Thousands of Units",
Xtitle = "Years",
Xgrid = TRUE,
Ygrid = TRUE)
# The lags function return the series with its l lags
lags <- function(ts.obj, l){
ts_merged <- NULL
# Creating n lags
for(i in 1:l){
}
# Merge the lags with the original series
ts_merged <- ts.union(ts.obj, ts_merged)
# Set the columns names
ts_merged <- ts.union(ts_merged, stats::lag(ts.obj, k = -i))
colnames(ts_merged) <- c("y", paste0("y_", 1:i))
# Removing missing values as results of creating the lags
ts_merged <- window(ts_merged,
start = start(ts.obj) + l,
end = end(ts.obj))
return(ts_merged)
}
head(lags(USVSales, l = 3))
ts_info(lags(USVSales, l = 3))
ts_mean <- function(mts.obj){
ts_avg <- ts_sum(mts.obj) / dim(mts.obj)[2] # Simple average calculation
return(ts_avg)
}
sma <- function(ts.obj, order){
l <- order -1
l <- lags(ts.obj = ts.obj, l = l)
m <- ts_mean(l)
u <- ts.union(ts.obj, m)
colnames(u) <- c("original", "transformed")
return(u)
}
sma_4 <- sma(USVSales, order = 4)
# Creating n lags
for(i in 1:l){
}
# The lags function return the series with its l lags
lags <- function(ts.obj, l){
ts_merged <- NULL
# Creating n lags
for(i in 1:l){
}
# Merge the lags with the original series
ts_merged <- ts.union(ts.obj, ts_merged)
# Set the columns names
ts_merged <- ts.union(ts_merged, stats::lag(ts.obj, k = -i))
colnames(ts_merged) <- c("y", paste0("y_", 1:i))
# Removing missing values as results of creating the lags
ts_merged <- window(ts_merged,
start = start(ts.obj) + l,
end = end(ts.obj))
return(ts_merged)
}
head(lags(USVSales, l = 3))
head(lags(USVSales, l = 3))
89.25/8
library(ggplot2)
Pubs= c(3, 6, 4, 5, 6, 3)
Voitures = c(13, 31, 19, 27, 23, 19 )
moyenne = mean(Voitures)
donnees= cbind.data.frame(Pubs, Voitures)
nuage = ggplot(donnees, aes(Pubs, Voitures))
nuage+ geom_point(color="blue")+ geom_smooth(method = "lm", se=FALSE, color="red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")
plot(Pubs, Voitures)
nuage+ geom_point(color="blue")+ geom_smooth(method = "lm", se=FALSE, color="red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")
model1 = lm(Voitures~ Pubs, data = donnees)
summary(model1)
anova(model1)
sum(Voitures**2)-sum(Voitures)/5
sum(Voitures**2)-sum(Voitures)**2/5
sum(Voitures**2)-(sum(Voitures)**2/5)
sum(Voitures**2)-(sum(Voitures)**2/6)
nuage+ geom_point(color= "blue")
geom_hline(yintercept = moyenne, colour= "Red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")+
annotate("text", x= 4, y=23, label= "Moyenne de y")+
theme_classic()
nuage+ geom_point(color= "blue")
geom_hline(yintercept = moyenne, colour= "Red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")+
annotate("text", x= 4, y=23, label= "Moyenne de y")+
theme_classic()
nuage = ggplot(donnees, aes(Pubs, Voitures))
nuage+ geom_point(color="blue")+ geom_smooth(method = "lm", se=FALSE, color="red")+
geom_hline(yintercept = moyenne, colour= "Red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")+
annotate("text", x= 4, y=23, label= "Moyenne de y")+
theme_classic()
library(ggplot2) # représentation graphique
library(reshape) # transformer les tableaux
Pubs= c(3, 6, 4, 5, 6, 3)
Voitures = c(13, 31, 19, 27, 23, 19 )
donnees= cbind.data.frame(Pubs, Voitures)
plot(Pubs, Voitures)
View(donnees)
nuage = ggplot(donnees, aes(Pubs, Voitures))
moyenne = mean(Voitures)
nuage+ geom_point(color="blue")+ geom_smooth(method = "lm", se=FALSE, color="red")+
geom_hline(yintercept = moyenne, colour= "Red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")+
annotate("text", x= 4, y=23, label= "Moyenne de y")+
theme_classic()
setwd("~/Desktop/UCA/SD 2021/scripts R")
ggsave("nuage de points")
ggsave("nuage de points", plot = last plot ())
?ggsave
ggsave("nuage de points.png")
model1 = lm(Voitures~ Pubs, data = donnees)
summary(model1)
anova(model1)
144/(144+62)
donnees2 = cbind.data.frame(scale(Voitures, center = TRUE, scale = FALSE), model$residuals)
donnees2 = cbind.data.frame(scale(Voitures, center = TRUE, scale = FALSE), model1$residuals)
names(donnees2) = c("Voitures vendues", "Résidus")
donneesMelt = melt(donnees2) # du package reshape
# construire un boxplot (facultatif)
boxplot = ggplot(donneesMelt, aes(variable, value, fill=variable))
boxplot + geom_boxplot(color="blue")+ theme_classic()+
labs(title = "Box plot des voitures vendues et des résidus",
x="voitures vendues et résidus",
y="Valeur")
donnees$prévisions = model1$fitted.values
donnees$Résidus = model1$residuals
donnees$Voitures_centree = scale(donnees$Voitures, scale = FALSE)
View(donnees)
setwd("~/Desktop/UCA/SD 2021/scripts R")
setwd("~/Desktop/UCA/SD 2021/scripts R")
library(ggplot2) # représentation graphique
library(reshape) # transformer les données
Pubs= c(3, 6, 4, 5, 6, 3)
Voitures = c(13, 31, 19, 27, 23, 19 )
donnees= cbind.data.frame(Pubs, Voitures)
plot(Pubs, Voitures)
nuage = ggplot(donnees, aes(Pubs, Voitures))
moyenne = mean(Voitures)
nuage+ geom_point(color="blue")+ geom_smooth(method = "lm", se=FALSE, color="red")+
geom_hline(yintercept = moyenne, colour= "Red")+
labs(title = "Voitures vendues par nombre de publicités",
x= "Nombre de publicités",
y= "Voitures vendues")+
annotate("text", x= 4, y=23, label= "Moyenne de y")+
theme_classic()
ggsave("nuage de points.png")
model1 = lm(Voitures~ Pubs, data = donnees)
summary(model1)
anova(model1)
144/206
# construire un boxplot (facultatif)
model1$
donnees2 = cbind.data.frame(scale(Voitures, center = TRUE, scale = FALSE), model1$residuals)
# construire un boxplot (facultatif)
model1$residuals
donnees2 = cbind.data.frame(scale(Voitures, center = TRUE, scale = FALSE), model1$residuals)
names(donnees2) = c("Voitures vendues", "Résidus")
View(donnees2)
donneesMelt = melt(donnees2) # du package reshape
View(donneesMelt)
boxplot = ggplot(donneesMelt, aes(variable, value, fill=variable))
boxplot + geom_boxplot(color="blue")+ theme_classic()+
labs(title = "Box plot des voitures vendues et des résidus",
x="voitures vendues et résidus",
y="Valeur")
Pubs= c(3, 6, 4, 5, 6, 3)
Voitures = c(13, 31, 19, 27, 23, 19 )
pubs2 = Pubs[-1]
Voitures2 = Voitures[-1]
donnees3 = cbind.data.frame(pubs2, Voitures2)
model2 = lm(Voitures2~ pubs2, data = donnees3)
summary(model2)
9.118+3.059*3
19-18.295
rstudent(model2)
rstudent(model1)
13-18.295
(13-18.295)/1.276
dffits(model1)
-1.053659+0.2656845
summary(model1)
4.474+3.895*3
summary(model2)
summary(model2)
4.474+3.895*3
9.118+3.059*3
(4.477+3.895*3)-(9.118+3.059*3)
dffits(model = model1)
(4.477+3.895*3)-(9.118+3.059*3)/(9.118+3*3.059)
((4.477+3.895*3)-(9.118+3.059*3))/(9.118+3*3.059)
((4.477+3.895*3)-(9.118+3.059*3))/(4.477+3*3.895)
sd(donnees$Voitures)
-2.133/6.418723
-2.133/1.276
(3+1)/70
library(car) # vérifier la multicollinéarité
library(ggplot2) # nuage de points
library(QuantPsyc) # lm.beta
setwd("~/Desktop/UCA/Marketing Research_An Applied Orientation/MR 7E EXCEL Input Data/Excel_Computer_Exercises_Input_Data")
donnees = readxl::read_xls("Chapter 17 Problem 2.xls")
View(donnees)
names(donnees) = c("Magasin", "Preference", "Qualité", "Prix", "Ports", "Marque", "Poids")
# Visualiser les données
head(donnees)
# Vérifier les données
summary(donnees)
pairs(donnees[,(2:4)])
plot(donnees$Preference, donnees$Qualité)
pairs(donnees[,(2:4)])
model1 = lm(Preference ~ Qualité  + Prix, data = donnees)
# Résumer le modèle
summary(model1)
vif(model1)
lm.beta(model1) # coefficients centré réduits
sd(donnees$Qualité)
sd(donnees$Preference)
0.798*sd(donnees$Preference)
lm.beta(model1) # coefficients normalisés
confint(model1) # 95% intervalle de confiance
durbinWatsonTest(model1)
donnees$résidus = rstudent(model1)
hist(donnees$résidus)
donnees$prévisions = fitted(model1)
nuage = ggplot(donnees, aes(prévisions, résidus))
nuage + geom_point() + geom_smooth(method = "lm" ,  colour= "Blue") + labs( x= "Valeurs prédites" ,  y = "Résidus normalisés")
nuage + geom_point() + geom_smooth(method = "lm" ,  colour= "Blue") + labs( x= "Valeurs prédites" ,  y = "Résidus studentisés")
View(donnees)
donnees$résidus_stud = rstudent(model1)
hist(donnees$résidus_stud)
pairs(donnees[,(2:4)])
donnees$cooks = cooks.distance(model1)
donnees$leverage = hatvalues(model1)
donnees$résidus_stud = rstudent(model1)
donnees$résidus = rstandard(model1)
donnees$résidus > 2 | donnees$résidus < 2
donnees$résidus > 2 | donnees$résidus < 2
donnees$large_résidus = donnees$résidus > 2 | donnees$résidus < 2
donnees$large_résidus = donnees$résidus > 2 | donnees$résidus < -2
3*(3)/14
3*(2+1)/14
1 # seuil de cooks
hist(donnees$résidus_stud)
donnees$résidus > 2 | donnees$résidus < -2
cor(donnees$Qualité, donnees$Prix)
cor.test(donnees)
cor.test(donnees$Prix, donnees$Qualité)
0.5305651*(12/(1-0.5305651**2))**0.5
library(haven)
GEM_2015_APS_Global_National_Level_Data_6Dec2016 <- read_sav("~/Downloads/GEM 2015 APS Global National Level Data_6Dec2016.sav")
View(GEM_2015_APS_Global_National_Level_Data_6Dec2016)
#
GEM = GEM_2015_APS_Global_National_Level_Data_6Dec2016
head(gem)
head(GEM)
library(tidyverse)
library(haven)
library(sjlabelled)
library(labelled)
library(surveytoolbox) # install with devtools::install_github("martinctc/surveytoolbox")
install.packages("sjlabelled")
library(sjlabelled)
devtools::install_github("martinctc/surveytoolbox")
library(surveytoolbox) # install with devtools::install_github("martinctc/surveytoolbox")
source_data_hv <- haven::read_sav(/Users/alibezzaa/Downloads/General Social Survey, 1991.SAV)
source_data_hv <- haven::read_sav("/Users/alibezzaa/Downloads/General Social Survey, 1991.SAV")
View(source_data_hv)
source_data_hv %>% # File read in using `haven::read_sav()`
.[,1:20] %>% # First 20 columns
glimpse()
source_data_hv$MARITAL %>% attr('labels')
GEM = GEM_2015_APS_Global_National_Level_Data_6Dec2016
GEM$Bstart15 %>% attr('labels')
GEM$TEA15 %>% attr('labels')
GEM %>% [,1:20]
GEM %>% .[,1:20]
GEM %>% .[,1:20] %>%  glimpse()
GEM$CAT_GCR1 %>% attr('labels')
GEM$CAT_GCR2 %>%  attr('labels')
GEM %>% .[,1:30] %>%  glimpse()
GEM %>% .[,1:40] %>%  glimpse()
GEM %>% .[,1:100] %>%  glimpse()
GEM$CAT_GCR1 %>%  attr('label')
source_data_hv %>% sjPlot::view_df()
library(sjlabelled)
source_data_hv %>% sjPlot::view_df()
?`sjlabelled-package`
source_data_hv %>% .[,1:20] %>% varl_tb()
source_data_hv %>% extract_vallab("WRKSTAT")
source_data_hv %>%  labelled::look_for("income deficit")
GEM %>%  .[,1:20] %>% varl_tb()
GEM %>%  .[,1:40] %>% varl_tb()
GEM %>%  .[,1:40] %>% varl_tb()
GEM %>%  .[,1:30] %>% varl_tb()
GEM %>%  .[,1:20] %>% varl_tb()
GEM %>% extract_vallab("Oppor15m")
GEM %>% extract_vallab("bjobst15")
GEM %>% extract_vallab("bjobst1")
GEM %>% labelled::look_for("health")
GEM %>% labelled::look_for("well")
GEM %>% labelled::look_for("income")
# inspect spss file
GEM %>% .[,1:100] %>%  glimpse()
View(GEM)
#
pairs([, (6:20)])
#
pairs(GEM[, (6:20)])
#
pairs(GEM[, (6:15)])
#
pairs(GEM[, (6:10)])
cor(GEM$Bstart15, GEM$Futsup15)
pairs(GEM[, (11:16)])
model1 = lm(Ownmge15~ Bstart15 + Futsup15 +Disent15 + Exitct15, data = GEM)
summary(model1)
model1 = lm(Ownmge15~ Bstart15 + Futsup15 +Disent15 + Exitct15 +
Frfail15 + Suskil15, data = GEM)
summary(model1)
model2 = lm(Ownmge15~  Exitct15  + Suskil15, data = GEM)
summary(model2)
GEM %>% extract_vallab("Exitct15")
GEM$CAT_GCR1 %>% attr('labels')
GEM$Ownmge15 %>%  attr('label')
GEM$Exitct15 %>%  attr('label')
GEM$Suskil15 %>%  aatr("label")
GEM$Suskil15 %>%  attr("label")
summary(model2)
